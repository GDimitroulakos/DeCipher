/* *********************************************************************************** */
/* Title : Automatically Generated C++ File by the GAN Tool								      */
/* File :CD_ASTDefines.h																	  */
/* Main Author: Grigorios Dimitroulakos															  */
/* Contributors: Christakis Lezos																  */
/* Creation Time:19:2, 19/3/2012		*/
/* *********************************************************************************** */

#ifndef DLASTDEFINES_
#define DLASTDEFINES_

#define DLAST_OUTPUTFILES 1
typedef enum DLASTOutputFiles {
	DLASTO_ASTDOT
}DLAST_EMMITERS;

extern const char *DLnonterminal_strings[];
extern const char *DLterminal_strings[];

typedef enum DLproduction_rules {
DLUNITIALIZED,
DLTOKEN_ASTERISK,
DLTOKEN_RBRACKET,
DLTOKEN_LBRACKET,
DLTOKEN_RPARENTHESIS,
DLTOKEN_LPARENTHESIS,
DLTOKEN_COLON,
DLTOKEN_RBRACE,
DLTOKEN_LBRACE,
DLTOKEN_EQUALSIGN,
DLTOKEN_COMMA,
DLTOKEN_SEMICOLON,
DLTOKEN_LEAST,
DLTOKEN_CONSTANT_EXPRESSION,
DLTOKEN_INT,
DLTOKEN_LONG,
DLTOKEN_REGISTER,
DLTOKEN_FLOAT,
DLTOKEN_DOUBLE,
DLTOKEN_UNSIGNED,
DLTOKEN_SIGNED,
DLTOKEN_TYPE_NAME,
DLTOKEN_STRUCT,
DLTOKEN_IDENTIFIER,
DLTOKEN_UNION,
DLTOKEN_TYPEDEF,
DLTOKEN_ENUM,
DLTOKEN_EXTERN,
DLTOKEN_STATIC,
DLTOKEN_AUTO,
DLTOKEN_VOID,
DLTOKEN_ELLIPSIS,
DLTOKEN_CHAR,
DLTOKEN_SHORT,
DLTOKEN_TYPE_EXPRESSION,
DLTOKEN_CONST,
DLTOKEN_VOLATILE,
DLTOKEN_IN,
DLTOKEN_OUT,
DLTOKEN_SCOPE_OP,
DLAST_Scdeclaration_unit__Scdeclarations_,
DLAST_Scdeclarations__Scdeclaration_,
DLAST_Scdeclarations__TYPE_EXPRESSION_Type_name_,
DLAST_Scdeclarations__Scdeclaration_Scdeclarations_,
DLAST_Scdeclarations__TYPE_EXPRESSION_Type_name_Scdeclarations_,
DLAST_Scdeclaration__Declaration_specifiers_SEMICOLON_,
DLAST_Scdeclaration__Declaration_specifiers_Init_declarator_list_SEMICOLON_,
DLAST_Declaration_specifiers__Storage_class_specifier_,
DLAST_Declaration_specifiers__Storage_class_specifier_Declaration_specifiers_,
DLAST_Declaration_specifiers__Type_specifier_,
DLAST_Declaration_specifiers__Type_specifier_Declaration_specifiers_,
DLAST_Declaration_specifiers__Type_qualifier_,
DLAST_Declaration_specifiers__Type_qualifier_Declaration_specifiers_,
DLAST_Init_declarator_list__Init_declarator_,
DLAST_Init_declarator_list__Init_declarator_list_COMMA_Init_declarator_,
DLAST_Init_declarator__Declarator_,
DLAST_Init_declarator__Declarator_EQUALSIGN_Initializer_,
DLAST_Storage_class_specifier__TYPEDEF_,
DLAST_Storage_class_specifier__EXTERN_,
DLAST_Storage_class_specifier__STATIC_,
DLAST_Storage_class_specifier__AUTO_,
DLAST_Storage_class_specifier__REGISTER_,
DLAST_Type_specifier__VOID_,
DLAST_Type_specifier__CHAR_,
DLAST_Type_specifier__SHORT_,
DLAST_Type_specifier__INT_,
DLAST_Type_specifier__LONG_,
DLAST_Type_specifier__FLOAT_,
DLAST_Type_specifier__DOUBLE_,
DLAST_Type_specifier__SIGNED_,
DLAST_Type_specifier__UNSIGNED_,
DLAST_Type_specifier__Struct_or_union_specifier_,
DLAST_Type_specifier__Enum_specifier_,
DLAST_Type_specifier__TYPE_NAME_,
DLAST_Struct_or_union_specifier__Struct_or_union_Qualified_id_LBRACE_Struct_declaration_list_RBRACE_,
DLAST_Struct_or_union_specifier__Struct_or_union_LBRACE_Struct_declaration_list_RBRACE_,
DLAST_Struct_or_union_specifier__Struct_or_union_Qualified_id_,
DLAST_Struct_or_union__STRUCT_,
DLAST_Struct_or_union__UNION_,
DLAST_Struct_declaration_list__Struct_declaration_,
DLAST_Struct_declaration_list__Struct_declaration_list_Struct_declaration_,
DLAST_Struct_declaration__Specifier_qualifier_list_Struct_declarator_list_SEMICOLON_,
DLAST_Specifier_qualifier_list__Type_specifier_Specifier_qualifier_list_,
DLAST_Specifier_qualifier_list__Type_specifier_,
DLAST_Specifier_qualifier_list__Type_qualifier_Specifier_qualifier_list_,
DLAST_Specifier_qualifier_list__Type_qualifier_,
DLAST_Struct_declarator_list__Struct_declarator_,
DLAST_Struct_declarator_list__Struct_declarator_list_COMMA_Struct_declarator_,
DLAST_Struct_declarator__Declarator_,
DLAST_Struct_declarator__COLON_Constant_expression_,
DLAST_Struct_declarator__Declarator_COLON_Constant_expression_,
DLAST_Enum_specifier__ENUM_LBRACE_Enumerator_list_RBRACE_,
DLAST_Enum_specifier__ENUM_Qualified_id_LBRACE_Enumerator_list_RBRACE_,
DLAST_Enum_specifier__ENUM_Qualified_id_,
DLAST_Enumerator_list__Enumerator_,
DLAST_Enumerator_list__Enumerator_list_COMMA_Enumerator_,
DLAST_Enumerator__IDENTIFIER_,
DLAST_Enumerator__IDENTIFIER_EQUALSIGN_Constant_expression_,
DLAST_Type_qualifier__CONST_,
DLAST_Type_qualifier__VOLATILE_,
DLAST_Type_qualifier__IN_,
DLAST_Type_qualifier__OUT_,
DLAST_Declarator__Pointer_Direct_declarator_,
DLAST_Declarator__Direct_declarator_,
DLAST_Direct_declarator__Qualified_id_,
DLAST_Direct_declarator__LPARENTHESIS_Declarator_RPARENTHESIS_,
DLAST_Direct_declarator__Direct_declarator_LBRACKET_Constant_expression_RBRACKET_,
DLAST_Direct_declarator__Direct_declarator_LBRACKET_RBRACKET_,
DLAST_Direct_declarator__Direct_declarator_LPARENTHESIS_Parameter_type_list_RPARENTHESIS_,
DLAST_Direct_declarator__Direct_declarator_LPARENTHESIS_RPARENTHESIS_,
DLAST_Pointer__ASTERISK_,
DLAST_Pointer__ASTERISK_Type_qualifier_list_,
DLAST_Pointer__ASTERISK_Pointer_,
DLAST_Pointer__ASTERISK_Type_qualifier_list_Pointer_,
DLAST_Type_qualifier_list__Type_qualifier_,
DLAST_Type_qualifier_list__Type_qualifier_list_Type_qualifier_,
DLAST_Parameter_type_list__Parameter_list_,
DLAST_Parameter_type_list__Parameter_list_COMMA_ELLIPSIS_,
DLAST_Parameter_list__Parameter_declaration_,
DLAST_Parameter_list__Parameter_list_COMMA_Parameter_declaration_,
DLAST_Parameter_declaration__Declaration_specifiers_Declarator_,
DLAST_Parameter_declaration__Declaration_specifiers_Abstract_declarator_,
DLAST_Parameter_declaration__Declaration_specifiers_,
DLAST_Type_name__Specifier_qualifier_list_Abstract_declarator_,
DLAST_Abstract_declarator__Pointer_,
DLAST_Abstract_declarator__Direct_abstract_declarator_,
DLAST_Abstract_declarator__Pointer_Direct_abstract_declarator_,
DLAST_Direct_abstract_declarator__LPARENTHESIS_Abstract_declarator_RPARENTHESIS_,
DLAST_Direct_abstract_declarator__LBRACKET_RBRACKET_,
DLAST_Direct_abstract_declarator__LBRACKET_Constant_expression_RBRACKET_,
DLAST_Direct_abstract_declarator__Direct_abstract_declarator_LBRACKET_RBRACKET_,
DLAST_Direct_abstract_declarator__Direct_abstract_declarator_LBRACKET_Constant_expression_RBRACKET_,
DLAST_Direct_abstract_declarator__LPARENTHESIS_RPARENTHESIS_,
DLAST_Direct_abstract_declarator__LPARENTHESIS_Parameter_type_list_RPARENTHESIS_,
DLAST_Direct_abstract_declarator__Direct_abstract_declarator_LPARENTHESIS_RPARENTHESIS_,
DLAST_Direct_abstract_declarator__Direct_abstract_declarator_LPARENTHESIS_Parameter_type_list_RPARENTHESIS_,
DLAST_Initializer__Assignment_expression_,
DLAST_Initializer__LBRACE_Initializer_list_RBRACE_,
DLAST_Initializer__LBRACE_Initializer_list_COMMA_RBRACE_,
DLAST_Initializer_list__Initializer_,
DLAST_Initializer_list__Initializer_list_COMMA_Initializer_,
DLAST_Qualified_id__IDENTIFIER_,
DLAST_Qualified_id__SCOPE_OP_IDENTIFIER_,
DLAST_Qualified_id__Qualified_id_SCOPE_OP_IDENTIFIER_,
DLAST_Assignment_expression__CONSTANT_EXPRESSION_,
DLAST_Constant_expression__CONSTANT_EXPRESSION_,
} DLNONTERMINAL_PRODUCTION_RULE;

typedef enum DLnonterminals{
DLNT_TERMINAL,
DLNT_scdeclaration_unit,
DLNT_scdeclarations,
DLNT_scdeclaration,
DLNT_type_name,
DLNT_declaration_specifiers,
DLNT_init_declarator_list,
DLNT_storage_class_specifier,
DLNT_type_specifier,
DLNT_type_qualifier,
DLNT_init_declarator,
DLNT_declarator,
DLNT_initializer,
DLNT_struct_or_union_specifier,
DLNT_enum_specifier,
DLNT_struct_or_union,
DLNT_qualified_id,
DLNT_struct_declaration_list,
DLNT_struct_declaration,
DLNT_specifier_qualifier_list,
DLNT_struct_declarator_list,
DLNT_struct_declarator,
DLNT_constant_expression,
DLNT_enumerator_list,
DLNT_enumerator,
DLNT_pointer,
DLNT_direct_declarator,
DLNT_parameter_type_list,
DLNT_type_qualifier_list,
DLNT_parameter_list,
DLNT_parameter_declaration,
DLNT_abstract_declarator,
DLNT_direct_abstract_declarator,
DLNT_assignment_expression,
DLNT_initializer_list
} DLNONTERMINAL_CODE;

typedef enum DLterminals{
DLT_NA,
DLT_LEAST,
DLT_CONSTANT_EXPRESSION,
DLT_INT,
DLT_LONG,
DLT_REGISTER,
DLT_FLOAT,
DLT_DOUBLE,
DLT_UNSIGNED,
DLT_SIGNED,
DLT_TYPE_NAME,
DLT_STRUCT,
DLT_IDENTIFIER,
DLT_UNION,
DLT_TYPEDEF,
DLT_ENUM,
DLT_EXTERN,
DLT_STATIC,
DLT_AUTO,
DLT_VOID,
DLT_ELLIPSIS,
DLT_CHAR,
DLT_SHORT,
DLT_TYPE_EXPRESSION,
DLT_CONST,
DLT_VOLATILE,
DLT_IN,
DLT_OUT,
DLT_SCOPE_OP,
DLT_SEMICOLON,
DLT_COMMA,
DLT_EQUALSIGN,
DLT_LBRACE,
DLT_RBRACE,
DLT_COLON,
DLT_LPARENTHESIS,
DLT_RPARENTHESIS,
DLT_LBRACKET,
DLT_RBRACKET,
DLT_ASTERISK
} DLTERMINAL_CODE;
#endif